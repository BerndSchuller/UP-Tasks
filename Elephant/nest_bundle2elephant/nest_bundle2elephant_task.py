#! /usr/bin/env python
import quantities as pq
import neo
from active_worker.task import task


@task
def nest_bundle2elephant_task(bundle_filename, t_start, t_stop, gdf_id_list):
    '''
        Task Manifest Version: 1
        Full Name: nest2elephant_task
        Caption: nest2elephant
        Author: Jakob Jordan, Johanna Senk
        Description: |
            Takes a gdf file generated by NEST and converts it into a neo
            hdf5 file, that can be processed by Elephant.
        Categories:
            - FDAT
        Compatible_queues: ['cscs_viz', 'cscs_bgq', 'epfl_viz']
        Accepts:
            bundle_filename:
                type: application/vnd.juelich.bundle.nest.data
                description: Input file of bundle type that contains spiking
                    data from a NEST simulation in gdf format.
            t_start:
                type: double
                description: Start time of spike train recording.
            t_stop:
                type: double
                description: Stop time of spike train recording.
            gdf_id_list:
                type: ListOf(LongType)
                description: Neuron IDs in the input file that should be
                    extracted, e.g., [1, 2, 3]. Provide an empty list [] to
                    extract all neurons with at least one spike.
        Returns:
            res: application/unknown
    '''

    folder_path = nest_bundle2elephant_task.task.uri.get_bundle(bundle_filename)
    input_files = glob.glob(folder_path + '*.gdf') # get spike files from bundle

    for input_file in input_files:
        # same as nest2elephant_task
        input_file = neo.io.GdfIO(input_filename)
        seg = input_file.read_segment(gdf_id_list=gdf_id_list, t_start=t_start*pq.ms, t_stop=t_stop*pq.ms)
        output_filename = input_filename.split('.')[0] + '.h5'
        output_file = neo.io.NeoHdf5IO(output_filename)
        output_file.write(seg.spiketrains)
        output_file.close()
    # TODO: OUTPUT TYPE MUST BE ALSO A BUNDLE OF H5 FILES OR ALTERNATIVELY 1 H5 FILE WITH EVERYTHING
    # TODO: SHALL WE ADD NEURON TYPE/LAYER AS ANNOTATION TO SPIKETRAINS?
    return nest2elephant_task.task.uri.save_file(mime_type='application/unknown',
                                                 src_path=output_filename,
                                                 dst_path=output_filename)

if __name__ == '__main__':
    bundle_filename = 'microcircuit_model_bundle'
    t_start = 0.
    t_stop = 300.
    gdf_id_list = []
    nest2elephant_task(bundle_filename, t_start, t_stop, gdf_id_list)


application/vnd.juelich.nest.spike_times
